---
---

<html lang='en'>
	<head>
		<meta charset='utf-8' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='viewport' content='width=device-width' />
		<meta name='generator' content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<h1>Astro</h1>

		<main>
			<div>
				{
					// Loop from 1 to 11 with buttons
					Array.from({ length: 11 }, (_, i) => i + 1).map(
						(chapter) => (
							<button type='button' data-chapter={chapter}>
								{chapter}
							</button>
						)
					)
				}
			</div>

			<script>
				document
					.querySelectorAll("button[data-chapter]")
					.forEach((button) => {
						button.addEventListener("click", (event) => {
							const newChapter = parseInt(
								event.target.dataset.chapter,
								10
							);
							changeChapter(newChapter);
						});
					});
				const audioContext = new (window.AudioContext ||
					window.webkitAudioContext)();

				async function loadAudio(url) {
					const response = await fetch(url);
					const arrayBuffer = await response.arrayBuffer();
					const audioBuffer = await audioContext.decodeAudioData(
						arrayBuffer
					);
					return audioBuffer;
				}

				function getAudioUrls(chapter) {
					const basePath = "/audio/";
					const loopUrl = `${basePath}${chapter}-loop.m4a`;
					const endingUrl = `${basePath}${chapter}-ending.m4a`;
					return { loopUrl, endingUrl };
				}
				const numberOfChapters = 11;
				const audioBuffers = {};

				(async () => {
					for (
						let chapter = 1;
						chapter <= numberOfChapters;
						chapter++
					) {
						const { loopUrl, endingUrl } = getAudioUrls(chapter);

						// Chapter 11 only has an ending
						if (chapter < numberOfChapters) {
							audioBuffers[`${chapter}-loop`] = await loadAudio(
								loopUrl
							);
						}

						// Chapter 1 only has a loop
						if (chapter > 1 && chapter < numberOfChapters) {
							audioBuffers[`${chapter}-ending`] = await loadAudio(
								endingUrl
							);
						}
					}
				})();

				let currentChapter = null;
				let currentSource = null;
				let currentSourceStartTime = null;

				function updateProgressBar(duration) {
					const progressBar = document.getElementById("progress-bar");
					progressBar.style.transitionDuration = `${duration}s`;
					progressBar.style.width = "100%";
					setTimeout(() => {
						progressBar.style.width = "0%";
						progressBar.style.transitionDuration = "0s";
					}, duration * 1000);
				}

				function playAudioBuffer(buffer, loop, onEnded) {
					const source = audioContext.createBufferSource();
					source.buffer = buffer;
					source.loop = loop;
					source.connect(audioContext.destination);

					if (onEnded) {
						source.onended = onEnded;
					}

					source.start();
					return source;
				}

				function changeChapter(newChapter) {
					if (currentChapter === newChapter && currentSource) {
						return;
					}

					if (currentSource) {
						currentSource.loop = false;
						currentSource.onended = null;
					}

					let nextAudio = audioBuffers[`${newChapter}-loop`];
					let endingAudio =
						currentChapter && currentChapter !== numberOfChapters
							? audioBuffers[`${currentChapter}-ending`]
							: null;

					if (currentSource) {
						currentSource.onended = () => {
							if (endingAudio) {
								const source = playAudioBuffer(
									endingAudio,
									false
								);
								source.onended = () => {
									currentSource = playAudioBuffer(
										nextAudio,
										newChapter !== numberOfChapters
									);
								};
							} else {
								currentSource = playAudioBuffer(
									nextAudio,
									newChapter !== numberOfChapters
								);
							}
						};
					} else {
						currentSource = playAudioBuffer(
							nextAudio,
							newChapter !== numberOfChapters
						);
					}

					if (currentSource && newChapter !== 1) {
						const elapsedTime =
							audioContext.currentTime - currentSourceStartTime;
						const loopTimeRemaining =
							currentSource.buffer.duration -
							(elapsedTime % currentSource.buffer.duration);
						const progressBarDuration =
							loopTimeRemaining +
							(endingAudio ? endingAudio.duration : 0);
						updateProgressBar(progressBarDuration);
					}

					currentChapter = newChapter;
				}
			</script>

			<div id='progress-bar-container'>
				<div id='progress-bar'></div>
			</div>
		</main>

		<style>
			#progress-bar-container {
				position: relative;
				width: 100%;
				height: 5px;
				background-color: #eee;
			}

			#progress-bar {
				position: absolute;
				left: 0;
				top: 0;
				height: 5px;
				width: 0%;
				background-color: #2196f3;
				transition-property: width;
				transition-timing-function: linear;
			}
		</style>
	</body>
</html>
