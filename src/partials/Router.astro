<script>
  import PixelAnimation from "../js/PixelAnimation.js";
  import { AudioPlayer } from "../js/AudioPlayer";
  // An array containing the URLs for the loop and ending audios for each part
  const audioData = [
    { loop: "/audio/1-loop.m4a" },
    {
      loop: "/audio/2-loop.m4a",
      ending: "/audio/2-ending.m4a",
    },
    {
      loop: "/audio/3-loop.m4a",
      ending: "/audio/3-ending.m4a",
    },
    {
      loop: "/audio/4-loop.m4a",
      ending: "/audio/4-ending.m4a",
    },
    {
      loop: "/audio/5-loop.m4a",
      ending: "/audio/5-ending.m4a",
    },
    {
      loop: "/audio/6-loop.m4a",
      ending: "/audio/6-ending.m4a",
    },
    {
      loop: "/audio/7-loop.m4a",
      ending: "/audio/7-ending.m4a",
    },
    {
      loop: "/audio/8-loop.m4a",
      ending: "/audio/8-ending.m4a",
    },
    {
      loop: "/audio/9-loop.m4a",
      ending: "/audio/9-ending.m4a",
    },
    {
      loop: "/audio/10-loop.m4a",
      ending: "/audio/10-ending.m4a",
    },
    {
      ending: "/audio/11-ending.m4a",
    },
  ];

  const audioPlayer = new AudioPlayer(audioData);
  audioPlayer.loadAudioBuffers().then(() => {
    console.log("Audio buffers loaded.");
  });

  // Store initialization
  document.addEventListener("alpine:init", () => {
    Alpine.store("chapter", 0);
    Alpine.store("audio", false);

    if (getChapterFromUrl() > 0) {
      confirmStartChapter(getChapterFromUrl());
    }

    document
      .getElementById("answer-0-0")
      .addEventListener("click", startWithMusic);

    window.addEventListener("hashchange", onUrlChange);
    window.addEventListener("audioEvent", onAudioEvent);

    Alpine.effect(updateDocumentTitle);
  });

  function getChapterFromUrl() {
    const chapterMatch = location.hash.match(/chapter-(\d+)/);
    return chapterMatch ? parseInt(chapterMatch[1]) : 0;
  }

  async function startWithMusic(event) {
    event.preventDefault();

    Alpine.store("audio", true);
    window.location.hash = "#chapter-1";
    await audioPlayer.switchToNextAudio(0);
  }

  async function confirmStartChapter(chapterNumber) {
    if (
      confirm(
        `Do you want to start from chapter ${chapterNumber}? Cancel to start from the beginning (and be able to activate music).`
      )
    ) {
      await setChapterAccordingToHash(false);
    } else {
      Alpine.store("chapter", 0);
      history.pushState(
        "",
        document.title,
        window.location.pathname + window.location.search
      );
    }
  }

  async function setChapterAccordingToHash(pixelate) {
    const chapter = getChapterFromUrl();
    if (!pixelate) {
      if (chapter > 0) {
        document.getElementById(`navigation`)!.style.opacity = "20%";
      }
      Alpine.store("chapter", chapter);
      // Loop through every element with navigation-${number smaller as chapter} and set width to 100%
      for (let i = 1; i < chapter + 1; i++) {
        console.log(`navigation-${i}`);
        const navigationElement = document.getElementById(`navigation-${i}`)!;
        navigationElement.style.transitionDuration = "0s";
        navigationElement.style.width = "100%";
      }
      return;
    }
    if (Alpine.store("audio") === true) {
      await audioPlayer.switchToNextAudio(chapter - 1);
    } else {
      await makeTransition(2);
    }
  }

  async function onUrlChange() {
    await setChapterAccordingToHash(true);
  }

  async function onAudioEvent(event) {
    const duration = event.detail.duration;
    if (getChapterFromUrl() < 2) {
      await makeTransition(2);
      return;
    }
    await makeTransition(duration);
  }

  async function makeTransition(duration) {
    const overlay = document.getElementById(`overlay`)!;

    const navigation = document.getElementById(`navigation`)!;
    const navigationElement = document.getElementById(
      `navigation-${getChapterFromUrl()}`
    )!;

    const durationInSeconds = `${duration * 0.5 - 50 / 1000}s`;
    overlay.style.transitionDuration = durationInSeconds;
    overlay.style.opacity = "0%";

    const pixelAnimation = new PixelAnimation({
      color: "#1A0C1A",
      blockSize: 4,
    });
    navigation.style.transitionDuration = durationInSeconds;
    navigation.style.opacity = "100%";
    overlay.style.opacity = "100%";
    navigationElement.style.transitionDuration = `${duration}s`;
    navigationElement.style.width = "100%";
    await pixelAnimation.createPixels(duration * 0.5 * 1000 - 50);
    await pixelAnimation.sleep(100);
    window.scrollTo({
      top: 0,
    });
    Alpine.store("chapter", getChapterFromUrl());
    overlay.style.opacity = "0%";
    navigation.style.opacity = "20%";
    await pixelAnimation.removePixels(duration * 0.5 * 1000 - 50);
  }

  function updateDocumentTitle() {
    const chapter = Alpine.store("chapter");
    const chapterTitle = document.querySelector(
      `#chapter-${chapter} h2, #chapter-${chapter} p`
    )?.textContent;

    const mainTitle = document.querySelector("h1")?.textContent;

    // set the document title to the chapter title
    document.title = `${mainTitle} â€“ ${chapterTitle}`;

    // set history state to set current title
    history.replaceState(
      { title: document.title },
      document.title,
      location.href
    );
  }
</script>
