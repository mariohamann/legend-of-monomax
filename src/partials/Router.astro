<script>
  import PixelAnimation from "../js/PixelAnimation.js";
  import { AudioPlayer } from "../js/AudioPlayer";

  // get all elements with class "only-with-js" and set display to block
  const onlyWithJs = document.getElementsByClassName("only-with-js");
  for (let i = 0; i < onlyWithJs.length; i++) {
    onlyWithJs[i].classList.remove("hidden");
  }

  // An array containing the URLs for the loop and ending audios for each part
  const audioData = [
    { loop: "/audio/1-loop.m4a" },
    {
      loop: "/audio/2-loop.m4a",
      ending: "/audio/2-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/3-loop.m4a",
      ending: "/audio/3-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/4-loop.m4a",
      ending: "/audio/4-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/5-loop.m4a",
      ending: "/audio/5-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/6-loop.m4a",
      ending: "/audio/6-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/7-loop.m4a",
      ending: "/audio/7-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/8-loop.m4a",
      ending: "/audio/8-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/9-loop.m4a",
      ending: "/audio/9-ending.m4a",
      crossfades: true,
    },
    {
      loop: "/audio/10-loop.m4a",
      ending: "/audio/10-ending.m4a",
      crossfades: true,
    },
    {
      ending: "/audio/11-ending.m4a",
    },
  ];

  let audioPlayer: AudioPlayer;
  let chapter: number;

  document
    .getElementById("answer-0-0")!
    .addEventListener("click", async (event) => {
      event.preventDefault();

      audioPlayer = new AudioPlayer(audioData);

      // Dummy sound to unlock Safari's AudioContext
      const source = audioPlayer.audioContext.createBufferSource();
      source.buffer = audioPlayer.audioContext.createBuffer(1, 1, 22050);
      source.connect(audioPlayer.audioContext.destination);
      source.start();

      function iOS() {
        return (
          [
            "iPad Simulator",
            "iPhone Simulator",
            "iPod Simulator",
            "iPad",
            "iPhone",
            "iPod",
          ].includes(navigator.platform) ||
          // iPad on iOS 13 detection
          (navigator.userAgent.includes("Mac") && "ontouchend" in document)
        );
      }

      if (iOS()) {
        document.getElementById("ios-warning")!.style.display = "block";
      }

      window.location.hash = "#chapter-1";

      const transitionManager = new TransitionManager();
      transitionManager.startTransition();

      // set timeStamp here
      const startTime = Date.now();

      try {
        await audioPlayer.audioContext.resume();
      } catch (e) {
        console.error("Failed to resume AudioContext:", e);
      }

      window.addEventListener("audioLoaded", () => {
        raiseLoadingPercentage();
      });

      audioPlayer.loadAudioBuffers().then(async () => {
        let pauseTime = 750;
        if (iOS()) {
          // check if 3000s were made from timestamp on, if not set transitionManager.pauseTransition  to difference
          const endTime = Date.now();
          const elapsedTime = endTime - startTime;
          pauseTime = elapsedTime < 5000 ? 5000 - elapsedTime : 0;
        }

        await transitionManager.pauseTransition(pauseTime);
        audioPlayer.switchToNextAudio(0);
        transitionManager.endTransition();
      });
    });

  window.addEventListener("hashchange", onUrlChange);
  window.addEventListener("audioEvent", onAudioEvent);

  if (getChapterFromUrl() > 0) {
    confirmStartChapter();
  } else {
    setChapter(0);
  }

  updateDocumentTitle();

  function getChapterFromUrl() {
    const chapterMatch = location.hash.match(/chapter-(\d+)/);
    return chapterMatch ? parseInt(chapterMatch[1]) : 0;
  }

  async function confirmStartChapter() {
    if (
      confirm(
        `Do you want to start from chapter ${getChapterFromUrl()}? Cancel to start from the beginning (and be able to activate music).`
      )
    ) {
      await setChapterAccordingToHash(false);
    } else {
      setChapter(0);
      history.pushState(
        "",
        document.title,
        window.location.pathname + window.location.search
      );
    }
  }
  async function setChapterAccordingToHash(pixelate: boolean) {
    const currentChapter = getChapterFromUrl();
    if (!pixelate) {
      if (currentChapter > 0) {
        document.getElementById(`navigation`)!.style.opacity = "20%";
      }
      setChapter(currentChapter);
      // Loop through every element with navigation-${number smaller as chapter} and set width to 100%
      for (let i = 1; i < currentChapter + 1; i++) {
        const navigationElement = document.getElementById(`navigation-${i}`)!;
        navigationElement.style.transitionDuration = "0s";
        navigationElement.style.width = "100%";
      }
      return;
    }
    if (audioPlayer) {
      await audioPlayer.switchToNextAudio(currentChapter - 1);
    } else {
      const transitionManager = new TransitionManager();
      if (currentChapter === 1) {
        await transitionManager.startTransition();
        await transitionManager.pauseTransition(0);
        let tasks = [];
        for (let i = 0; i < 20; i++) {
          tasks.push(
            new Promise((resolve) => {
              setTimeout(() => {
                raiseLoadingPercentage();
                resolve();
              }, i * 50);
            })
          );
        }

        // wait for all tasks to complete
        await Promise.all(tasks);

        // when done, end transition
        await transitionManager.endTransition();
        return;
      }

      transitionManager.makeTransition();
    }
  }

  const raiseLoadingPercentage = () => {
    const loadingPercentage = document.getElementById("loading-percentage")!;
    loadingPercentage.innerHTML = `${
      parseInt(loadingPercentage.innerHTML) + 5
    }`;
  };

  async function onUrlChange() {
    await setChapterAccordingToHash(true);
  }

  async function onAudioEvent(event: any) {
    const duration = event.detail.duration;
    if (chapter === 0 || event.detail.part === 0) {
      return;
    }
    const transitionManager = new TransitionManager(duration * 1000);
    await transitionManager.makeTransition();
  }

  class TransitionManager {
    private overlay: HTMLElement;
    private navigation: HTMLElement;
    private navigationElement: HTMLElement;
    private transitionElement: HTMLElement;
    private transitionContentElement: HTMLElement;
    private pixelAnimation: PixelAnimation;
    private duration = {
      in: 750,
      delay: 4000,
      out: 750,
    };

    constructor(duration?: number) {
      this.overlay = document.getElementById("overlay")!;
      this.navigation = document.getElementById("navigation")!;
      this.navigationElement = document.getElementById(
        `navigation-${getChapterFromUrl()}`
      )!;
      this.transitionElement = document.getElementById(
        `transition-${getChapterFromUrl() - 1}`
      )!;
      this.transitionContentElement = document.getElementById(
        `transition-content-${getChapterFromUrl() - 1}`
      )!;

      this.pixelAnimation = new PixelAnimation({
        color: "#1A0C1A",
        blockSize: 4,
      });

      if (duration && duration > 4750) {
        this.duration.in = duration - 4000;
      } else {
        this.duration.in = 750;
      }
    }

    public async startTransition() {
      // 1. set transition duration
      this.overlay.style.transitionDuration = `${this.duration.in}ms`;
      this.navigation.style.transitionDuration = `${this.duration.in}ms`;
      this.navigationElement.style.transitionDuration = `${
        this.duration.in + this.duration.delay + this.duration.out
      }ms`;
      this.transitionContentElement.style.transitionDuration = `${
        (this.duration.in * 1) / 2
      }ms`;

      // 2. set defaults before transition
      this.overlay.style.opacity = "0%";
      document
        .querySelectorAll('[id^="transition-"].fixed')
        .forEach((transitionElement) => {
          transitionElement.style.display = "none";
        });

      this.transitionElement.style.display = "flex";
      this.transitionContentElement.style.opacity = "0%";

      // 3. start transition
      this.navigation.style.opacity = "100%";
      this.overlay.style.opacity = "100%";
      this.navigationElement.style.width = "100%";

      setTimeout(() => {
        this.transitionContentElement.style.opacity = "100%";
      }, (this.duration.in * 1) / 2);

      await this.pixelAnimation.createPixels(this.duration.in);
    }

    public async pauseTransition(delay?: number) {
      await this.pixelAnimation.sleep(
        delay !== undefined ? delay : this.duration.delay
      );
      window.scrollTo({
        top: 0,
      });

      setChapter(getChapterFromUrl());
    }

    public async endTransition() {
      // 1. set transition duration
      this.overlay.style.transitionDuration = `${this.duration.out}ms`;
      this.navigation.style.transitionDuration = `${this.duration.out}ms`;
      this.transitionContentElement.style.transitionDuration = `${
        (this.duration.out * 1) / 2
      }ms`;

      // 2. start transition
      this.overlay.style.opacity = "0%";
      this.navigation.style.opacity = "20%";
      this.transitionContentElement.style.opacity = "0%";
      await this.pixelAnimation.removePixels(this.duration.out);
      this.transitionElement.style.display = "none";
    }

    public async makeTransition() {
      await this.startTransition();
      await this.pauseTransition();
      await this.endTransition();
    }
  }

  function setChapter(newChapter: number) {
    chapter = newChapter;

    // Select all chapter divs
    const chapters = document.querySelectorAll('[id^="chapter-"]');

    // Hide all chapters
    chapters.forEach((chap) => {
      chap.classList.add("hidden");
      chap.classList.add("opacity-0");
    });

    // Show the current chapter
    const currentChapter = document.getElementById(`chapter-${chapter}`);
    if (currentChapter) {
      currentChapter.classList.remove("hidden");
      currentChapter.classList.remove("opacity-0");
    }

    updateDocumentTitle();
  }

  function updateDocumentTitle() {
    const chapterTitle = document.querySelector(
      `#chapter-${chapter} h2, #chapter-${chapter} p`
    )?.textContent;

    const mainTitle = document.querySelector("h1")?.textContent;

    // set the document title to the chapter title
    document.title = `${chapterTitle} – ${mainTitle}`;

    // set history state to set current title
    history.replaceState(
      { title: document.title },
      document.title,
      location.href
    );
  }
</script>
