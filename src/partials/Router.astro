<script>
  import PixelAnimation from "../js/PixelAnimation.js";
  import { AudioPlayer } from "../js/AudioPlayer";

  // get all elements with class "only-with-js" and set display to block
  const onlyWithJs = document.getElementsByClassName("only-with-js");
  for (let i = 0; i < onlyWithJs.length; i++) {
    onlyWithJs[i].classList.remove("hidden");
  }

  // An array containing the URLs for the loop and ending audios for each part
  const audioData = [
    { loop: "/audio/1-loop.m4a" },
    {
      loop: "/audio/2-loop.m4a",
      ending: "/audio/2-ending.m4a",
    },
    {
      loop: "/audio/3-loop.m4a",
      ending: "/audio/3-ending.m4a",
    },
    {
      loop: "/audio/4-loop.m4a",
      ending: "/audio/4-ending.m4a",
    },
    {
      loop: "/audio/5-loop.m4a",
      ending: "/audio/5-ending.m4a",
    },
    {
      loop: "/audio/6-loop.m4a",
      ending: "/audio/6-ending.m4a",
    },
    {
      loop: "/audio/7-loop.m4a",
      ending: "/audio/7-ending.m4a",
    },
    {
      loop: "/audio/8-loop.m4a",
      ending: "/audio/8-ending.m4a",
    },
    {
      loop: "/audio/9-loop.m4a",
      ending: "/audio/9-ending.m4a",
    },
    {
      loop: "/audio/10-loop.m4a",
      ending: "/audio/10-ending.m4a",
    },
    {
      ending: "/audio/11-ending.m4a",
    },
  ];

  let audioPlayer: AudioPlayer;
  let chapter: number;

  document
    .getElementById("answer-0-0")!
    .addEventListener("click", async (event) => {
      event.preventDefault();

      audioPlayer = new AudioPlayer(audioData);

      // Dummy sound to unlock Safari's AudioContext
      const source = audioPlayer.audioContext.createBufferSource();
      source.buffer = audioPlayer.audioContext.createBuffer(1, 1, 22050);
      source.connect(audioPlayer.audioContext.destination);
      source.start();

      try {
        await audioPlayer.audioContext.resume();
      } catch (e) {
        console.error("Failed to resume AudioContext:", e);
      }

      await audioPlayer.loadAudioBuffers().then(() => {
        console.log("Audio buffers loaded.");
      });

      window.location.hash = "#chapter-1";
      await audioPlayer.switchToNextAudio(0);
    });

  window.addEventListener("hashchange", onUrlChange);
  window.addEventListener("audioEvent", onAudioEvent);

  if (getChapterFromUrl() > 0) {
    confirmStartChapter();
  } else {
    setChapter(0);
  }

  updateDocumentTitle();

  function getChapterFromUrl() {
    const chapterMatch = location.hash.match(/chapter-(\d+)/);
    return chapterMatch ? parseInt(chapterMatch[1]) : 0;
  }

  async function confirmStartChapter() {
    if (
      confirm(
        `Do you want to start from chapter ${getChapterFromUrl()}? Cancel to start from the beginning (and be able to activate music).`
      )
    ) {
      await setChapterAccordingToHash(false);
    } else {
      setChapter(0);
      history.pushState(
        "",
        document.title,
        window.location.pathname + window.location.search
      );
    }
  }
  async function setChapterAccordingToHash(pixelate: boolean) {
    const currentChapter = getChapterFromUrl();
    if (!pixelate) {
      if (currentChapter > 0) {
        document.getElementById(`navigation`)!.style.opacity = "20%";
      }
      setChapter(currentChapter);
      // Loop through every element with navigation-${number smaller as chapter} and set width to 100%
      for (let i = 1; i < currentChapter + 1; i++) {
        const navigationElement = document.getElementById(`navigation-${i}`)!;
        navigationElement.style.transitionDuration = "0s";
        navigationElement.style.width = "100%";
      }
      return;
    }
    if (audioPlayer) {
      await audioPlayer.switchToNextAudio(currentChapter - 1);
    } else {
      await makeTransition(2);
    }
  }

  async function onUrlChange() {
    await setChapterAccordingToHash(true);
  }

  async function onAudioEvent(event: any) {
    const duration = event.detail.duration;
    if (chapter === 0) {
      await makeTransition(2);
      return;
    }
    await makeTransition(duration);
  }

  async function makeTransition(duration: number) {
    const overlay = document.getElementById("overlay")!;
    const navigation = document.getElementById("navigation")!;
    const navigationElement = document.getElementById(
      `navigation-${getChapterFromUrl()}`
    )!;

    const durationInSeconds = `${duration * 0.5 - 50 / 1000}s`;
    const pixelAnimation = new PixelAnimation({
      color: "#1A0C1A",
      blockSize: 4,
    });

    beforeChapterSwitch(
      overlay,
      navigation,
      navigationElement,
      durationInSeconds,
      duration
    );

    await pixelAnimation.createPixels(duration * 0.5 * 1000 - 50);
    await pixelAnimation.sleep(100);

    window.scrollTo({
      top: 0,
    });

    setChapter(getChapterFromUrl());

    afterChapterSwitch(overlay, navigation);

    await pixelAnimation.removePixels(duration * 0.5 * 1000 - 50);
  }

  function setChapter(newChapter: number) {
    chapter = newChapter;

    // Select all chapter divs
    const chapters = document.querySelectorAll('[id^="chapter-"]');

    // Hide all chapters
    chapters.forEach((chap) => {
      chap.classList.add("hidden");
      chap.classList.add("opacity-0");
    });

    // Show the current chapter
    const currentChapter = document.getElementById(`chapter-${chapter}`);
    if (currentChapter) {
      currentChapter.classList.remove("hidden");
      currentChapter.classList.remove("opacity-0");
    }
  }

  function beforeChapterSwitch(
    overlay: HTMLElement,
    navigation: HTMLElement,
    navigationElement: HTMLElement,
    durationInSeconds: string,
    duration: number
  ) {
    overlay.style.transitionDuration = durationInSeconds;
    overlay.style.opacity = "0%";

    navigation.style.transitionDuration = durationInSeconds;
    navigation.style.opacity = "100%";

    overlay.style.opacity = "100%";
    navigationElement.style.transitionDuration = `${duration}s`;
    navigationElement.style.width = "100%";
  }

  function afterChapterSwitch(overlay: HTMLElement, navigation: HTMLElement) {
    // Update the DOM to reflect the new chapter
    setChapter(chapter);

    overlay.style.opacity = "0%";
    navigation.style.opacity = "20%";
  }

  function updateDocumentTitle() {
    const chapterTitle = document.querySelector(
      `#chapter-${chapter} h2, #chapter-${chapter} p`
    )?.textContent;

    const mainTitle = document.querySelector("h1")?.textContent;

    // set the document title to the chapter title
    document.title = `${mainTitle} â€“ ${chapterTitle}`;

    // set history state to set current title
    history.replaceState(
      { title: document.title },
      document.title,
      location.href
    );
  }
</script>
